
struct VS_OUTPUT {
   float4 Pos: POSITION;
   float2 texCoord: TEXCOORD0;
   float3 norm: TEXCOORD1;
   float fogExponent:	TEXCOORD2;
   float4 lightPos: TEXCOORD3;
};

VS_OUTPUT main_vp(float4 Pos: POSITION, 
				  float2 texCoord: TEXCOORD0,
				  float3 normal: NORMAL,
				//uniform float4x4 WorldViewProjMat,
				uniform float4x4 LightViewProj,
				uniform float4x4 WorldMat,
				uniform float4x4 ViewMat,
				uniform float4x4 ProjMat,
				uniform float3 ViewPos) 
{
	VS_OUTPUT Out;
	
	float4x4 wvp=mul(ViewMat,ProjMat);
	wvp=mul(WorldMat,wvp);

	Out.Pos=mul(Pos,wvp);
	Out.texCoord=texCoord;
	
	float4 wpos=mul(Pos,WorldMat);
	
	Out.lightPos=mul(wpos,LightViewProj);
	
	Out.norm=mul(normal,(float3x3)WorldMat);;
		
	float fogDistance  = max(0,length(ViewPos-wpos.xyz)-200);
	
	Out.fogExponent=fogDistance*0.001;
	
	return Out;
}

//////////////////////////////////

float4 softDiffuse(float3 normal,float4 lcolor,float3 ldir)
{
	float ndl=clamp(dot(normal,ldir.xyz),0.0f,1.0f);
	
	return (ndl)*lcolor;
}

float3 weight[]=
{
	float3(-1,-1,-0.05),
	float3( 0,-1,-0.1),
	float3( 1,-1,-0.05),
	float3( 1, 0,-0.1),
	float3( 1, 1,-0.05),
	float3( 0, 1,-0.1),
	float3(-1, 1,-0.05),
	float3(-1, 0,-0.1),
	float3( 0, 0,-0.4),
};
float calcShadow(float3 lightPos,sampler shadowMap,float2 shadowMapSize)
{
	float DepthBias=0.0015;
	
	float ourDepth=lightPos.z -DepthBias ;
		
	float2 shadowTC=0.5*lightPos.xy + float2(0.5,0.5);
	//shadowTC.y=1-shadowTC.y;
	
	shadowTC.x=clamp(shadowTC.x,0,1);
	shadowTC.y=clamp(shadowTC.y,0,1);
	
	float ndv;
	ndv=1;
	float2 texSize=1.0f/2048.0f;
	texSize.x=1.0f/shadowMapSize.x;
	texSize.y=1.0f/shadowMapSize.y;
	
	
	for(int i=0;i<9;i++){
		float shadowDepth=tex2D(shadowMap,shadowTC+weight[i].xy*texSize).r;
		if(shadowDepth< ourDepth){
			ndv +=weight[i].z;
		}
	}
	
	ndv=ndv*0.8+0.2;
	
	return ndv;
}

float4 main_fp(float2 texCoord: TEXCOORD0, 
				float3 normal:TEXCOORD1,
				float fogExponent:	TEXCOORD2,
				float4 lightPos: TEXCOORD3,
				uniform float3 light0Dir,
				uniform float4 Light0Diff,
				uniform sampler tex0,
				uniform float2 shadowMapSize,
				uniform sampler shadowMap) : COLOR 
{



	float fogFactor   = exp2(-abs(fogExponent));
	float4 base=tex2D(tex0,texCoord);
	normal=normalize(normal);
	
	lightPos.xyz/=lightPos.w;
	
	float ndv=calcShadow(lightPos.xyz,shadowMap,shadowMapSize);
	
	float4 diff=softDiffuse(normal,Light0Diff,light0Dir);
	float kd=0.7;	
	
	return lerp( float4(0.7,0.9,0.9,1),base*(0.4+diff*kd)*ndv,fogFactor);

}
