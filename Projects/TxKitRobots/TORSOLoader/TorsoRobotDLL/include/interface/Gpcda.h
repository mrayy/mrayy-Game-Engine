// -----------------------------------------------------------------------
//		
//		ヘッダファイル
//
//		File Name	:	GpcDa.h
//
//		Ver 1.00
//
//										Copyright (C) 1999 Interface Corp.
// -----------------------------------------------------------------------

#if !defined( _FbiDa_H_ )
#define _FbiDa_H_

#ifdef __cplusplus
extern	"C" {
#endif

//-----------------------------------------------------------------------------------------------
//
//		同期処理識別子
//
//-----------------------------------------------------------------------------------------------
#define FLAG_SYNC	1	// 同期でサンプリング入力
#define FLAG_ASYNC	2	// 非同期でサンプリング入力

//-----------------------------------------------------------------------------------------------
//
//		ファイル形式識別子
//
//-----------------------------------------------------------------------------------------------
#define FLAG_BIN	1	// バイナリ形式ファイル
#define FLAG_CSV	2	// ＣＳＶ形式ファイル

//-----------------------------------------------------------------------------------------------
//
//		サンプリング状態識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_STATUS_STOP_SAMPLING		1	// サンプリングは停止しています
#define DA_STATUS_WAIT_TRIGGER		2	// サンプリングはトリガ待ち状態です
#define DA_STATUS_NOW_SAMPLING		3	// サンプリング動作中です

//-----------------------------------------------------------------------------------------------
//
//		イベント要因識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_EVENT_STOP_TRIGGER		1	// トリガによるサンプリング停止
#define DA_EVENT_STOP_FUNCTION		2	// 関数によるサンプリング停止
#define DA_EVENT_STOP_SAMPLING		3	// サンプリング終了
#define DA_EVENT_RESET_IN			4	// リセットインの発生
#define DA_EVENT_CURRENT_OFF		5	// 電流断の検出

//-----------------------------------------------------------------------------------------------
//
//		調整ＶＲ識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_ADJUST_BIOFFSET			1	// バイポーラオフセット調整
#define DA_ADJUST_UNIOFFSET			2	// ユニポーラオフセット調整
#define DA_ADJUST_BIGAIN			3	// バイポーラゲイン調整
#define DA_ADJUST_UNIGAIN			4	// ユニポーラゲイン調整

//-----------------------------------------------------------------------------------------------
//
//		調整操作識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_ADJUST_UP				1	// アップ
#define DA_ADJUST_DOWN				2	// ダウン
#define DA_ADJUST_STORE				3	// ストアする
#define DA_ADJUST_STANDBY			4	// スタンバイ
#define DA_ADJUST_NOT_STORE			5	// ストアしない

//-----------------------------------------------------------------------------------------------
//
//		データ識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_DATA_PHYSICAL			1	// 物理量(電圧[V]/電流[mA])
#define DA_DATA_BIN8				2	// 8bitバイナリ
#define DA_DATA_BIN12				3	// 12bitバイナリ
#define DA_DATA_BIN16				4	// 16bitバイナリ
#define DA_DATA_BIN24				5	// 24bitバイナリ

//-----------------------------------------------------------------------------------------------
//
//		データ変換識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_CONV_SMOOTH				1		// データに対し、スムージングによる変換を行います。
#define DA_CONV_AVERAGE1			0x100	// データに対し、単純平均による変換を行います。
#define DA_CONV_AVERAGE2			0x200	// データに対し、移動平均による変換を行います。

//-----------------------------------------------------------------------------------------------
//
//		サンプリング指定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_IO_SAMPLING				1	// I/O方式
#define DA_FIFO_SAMPLING			2	// FIFO方式
#define DA_MEM_SAMPLING				4	// メモリ方式

//-----------------------------------------------------------------------------------------------
//
//		トリガポイント指定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_TRIG_START				1	// スタートトリガ(デフォルト)
#define DA_TRIG_STOP				2	// ストップトリガ
#define DA_TRIG_START_STOP			3	// スタートストップトリガ

//-----------------------------------------------------------------------------------------------
//
//		トリガ指定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_FREERUN					1	// トリガなし(デフォルト)
#define DA_EXTTRG					2	// 外部トリガ
#define DA_EXTTRG_DI				3	// 外部+DIトリガ

//-----------------------------------------------------------------------------------------------
//
//		極性指定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_DOWN_EDGE				1	// 立ち下がりエッジ(デフォルト)
#define DA_UP_EDGE					2	// 立ち上がりエッジ

//-----------------------------------------------------------------------------------------------
//
//		レンジ指定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_0_1V				0x00000001	// 電圧　ユニポーラ0〜1V
#define DA_0_2P5V			0x00000002	// 電圧　ユニポーラ0〜2.5V
#define DA_0_5V				0x00000004	// 電圧　ユニポーラ0〜5V
#define DA_0_10V			0x00000008	// 電圧　ユニポーラ0〜10V
#define DA_1_5V				0x00000010	// 電圧　ユニポーラ1〜5V
#define DA_0_20mA			0x00001000	// 電流　ユニポーラ0〜20mA
#define DA_4_20mA			0x00002000	// 電流　ユニポーラ4〜20mA
#define DA_1V				0x00010000	// 電圧　バイポーラ ±1V
#define DA_2P5V				0x00020000	// 電圧　バイポーラ ±2.5V
#define DA_5V				0x00040000	// 電圧　バイポーラ ±5V
#define DA_10V				0x00080000	// 電圧　バイポーラ ±10V

//-----------------------------------------------------------------------------------------------
//
//		絶縁指定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_ISOLATION				1	// 絶縁ボード
#define DA_NOT_ISOLATION			2	// 非絶縁ボード

//-----------------------------------------------------------------------------------------------
//
//		レンジ識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_RANGE_UNIPOLAR			1	// ユニポーラ
#define DA_RANGE_BIPOLAR			2	// バイポーラ

//-----------------------------------------------------------------------------------------------
//
//		モード識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_MODE_CUT					1	// カットモード
#define DA_MODE_SYNTHE				2	// デジタルシンセサイザモード

//-----------------------------------------------------------------------------------------------
//
//		繰り返し時のインターバル識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_REPEAT_NONINTERVAL		1	// データを繰り返し出力
#define DA_REPEAT_INTERVAL			2	// 一定周期にて繰り返し出力

//-----------------------------------------------------------------------------------------------
//
//		カウンタクリア識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_COUNTER_CLEAR			1	// サンプリングスタート時にカウンタをクリア
#define DA_COUNTER_NONCLEAR			2	// サンプリングスタート時にカウンタをクリアしない

//-----------------------------------------------------------------------------------------------
//
//		DAラッチ方法識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_LATCH_CLEAR				1	// DAラッチをクリア
#define DA_LATCH_NONCLEAR			2	// DAラッチをクリアしない

//-----------------------------------------------------------------------------------------------
//
//		内部サンプリングクロック識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_CLOCK_TIMER				1	// タイマ（８２５４）使用
#define DA_CLOCK_FIXED				2	// 5MHz固定

//-----------------------------------------------------------------------------------------------
//
//		外部入出力制御識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_EXTRG_IN					1	// 外部トリガ入力
#define DA_EXTRG_OUT				2	// 外部トリガ出力

//-----------------------------------------------------------------------------------------------
//
//		外部クロック入出力識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_EXCLK_IN					1	// 外部クロック入力
#define DA_EXCLK_OUT				2	// 外部クロック出力

//-----------------------------------------------------------------------------------------------
//
//		フィルタ設定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_FILTER_OFF				1	// フィルタ設定なし
#define DA_FILTER_ON				2	// フィルタ設定あり

//-----------------------------------------------------------------------------------------------
//
//		複数毎同期アナログ出力設定識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_MASTER_MODE				1	// マスタモード
#define DA_SLAVE_MODE				2	// スレーブモード

//-----------------------------------------------------------------------------------------------
//
//		エラー識別子
//
//-----------------------------------------------------------------------------------------------
#define DA_ERROR_SUCCESS						0x00000000
#define DA_ERROR_NOT_DEVICE						0xC0000001
#define DA_ERROR_NOT_OPEN						0xC0000002
#define DA_ERROR_INVALID_HANDLE					0xC0000003
#define DA_ERROR_ALREADY_OPEN					0xC0000004
#define DA_ERROR_NOT_SUPPORTED					0xC0000009
#define DA_ERROR_NOW_SAMPLING					0xC0001001
#define DA_ERROR_STOP_SAMPLING					0xC0001002
#define DA_ERROR_START_SAMPLING					0xC0001003
#define DA_ERROR_SAMPLING_TIMEOUT				0xC0001004
#define DA_ERROR_INVALID_PARAMETER				0xC0001021
#define DA_ERROR_ILLEGAL_PARAMETER				0xC0001022
#define DA_ERROR_NULL_POINTER					0xC0001023
#define DA_ERROR_SET_DATA						0xC0001024
#define DA_ERROR_FILE_OPEN						0xC0001041
#define DA_ERROR_FILE_CLOSE						0xC0001042
#define DA_ERROR_FILE_READ						0xC0001043
#define DA_ERROR_FILE_WRITE						0xC0001044
#define DA_ERROR_INVALID_DATA_FORMAT			0xC0001061
#define DA_ERROR_INVALID_AVERAGE_OR_SMOOTHING	0xC0001062
#define DA_ERROR_INVALID_SOURCE_DATA			0xC0001063
#define DA_ERROR_NOT_ALLOCATE_MEMORY			0xC0001081
#define DA_ERROR_NOT_LOAD_DLL					0xC0001082
#define DA_ERROR_CALL_DLL						0xC0001083

// -----------------------------------------------------------------------
//
//		ユーザ関数　型指定
//
// -----------------------------------------------------------------------
typedef void (CALLBACK DACONVPROC)(
	WORD wCh,		// チャンネル番号
	DWORD dwCount,	// データ件数
	LPVOID lpData	// データへのポインタ
);
typedef DACONVPROC FAR *LPDACONVPROC;

typedef void (CALLBACK DACALLBACK)(DWORD dwUser);
typedef DACALLBACK FAR *LPDACALLBACK;

// -----------------------------------------------------------------------
//	各チャンネル毎のサンプリング条件構造体
// -----------------------------------------------------------------------
typedef struct {
	ULONG			ulChNo; 
	ULONG			ulRange; 
} DASMPLCHREQ, *PDASMPLCHREQ;

// -----------------------------------------------------------------------
//	サンプリング条件構造体
// -----------------------------------------------------------------------
typedef struct {
	ULONG			ulChCount;
	DASMPLCHREQ		SmplChReq[256]; 
	ULONG			ulSamplingMode; 
	float			fSmplFreq; 
	ULONG			ulSmplRepeat;
	ULONG			ulTrigMode; 
	ULONG			ulTrigPoint;
	ULONG			ulTrigDelay; 
	ULONG			ulEClkEdge; 
	ULONG			ulTrigEdge; 
	ULONG			ulTrigDI; 
} DASMPLREQ, *PDASMPLREQ;


// -----------------------------------------------------------------------
//	ボード仕様構造体
// -----------------------------------------------------------------------
typedef struct {
	ULONG			ulBoardType; 
	ULONG			ulBoardID; 
	ULONG			ulSamplingMode; 
	ULONG			ulChCount; 
	ULONG			ulResolution; 
	ULONG			ulRange;	
	ULONG			ulIsolation; 
	ULONG			ulDi; 
	ULONG			ulDo; 
} DABOARDSPEC, *PDABOARDSPEC;

// -----------------------------------------------------------------------
//	各チャンネル毎のレンジ電圧設定構造体（PCI-3305用）
// -----------------------------------------------------------------------
typedef struct {
	ULONG		ulRange;
	float		fVolt;
	ULONG		ulFilter;
} DAMODECHREQ, *PDAMODECHREQ;

// -----------------------------------------------------------------------
//	モード設定構造体（PCI-3305用）
// -----------------------------------------------------------------------
typedef struct {
	DAMODECHREQ		ModeChReq[2]; 
	ULONG			ulPulseMode; 
	ULONG			ulSyntheOut; 
	ULONG			ulInterval; 
	float			fIntervalCycle; 
	ULONG			ulCounterClear; 
	ULONG			ulDaLatch; 
	ULONG			ulSamplingClock; 
	ULONG			ulExControl; 
	ULONG			ulExClock; 
} DAMODEREQ, *PDAMODEREQ;


#ifdef __cplusplus
}
#endif

#endif
