


//mray ascii Model exporter  Mohamad yamen saraiji //////////////////////////////////////////
 global int $tf_aindex=0; 
global string $tf_anames[]; 
clear $tf_anames; 
global string $tf_aframes[]; 
clear $tf_aframes;  print $tf_anames;  
proc int bc_add() 
{
 	global int $tf_aindex;
 	global string $tf_anames[];
  	global string $tf_aframes[];
  	$tf_aindex++;
 	setParent RCL2;
 	$tf_anames[$tf_aindex]=`textField`;
 	$tf_aframes[$tf_aindex]=`textField`;
 	return 1; }
proc int bc_remove() 
{
 	global int $tf_aindex;
 	global string $tf_anames[];
 	global string $tf_aframes[];
  	if($tf_aindex>0)
 	{
 		deleteUI $tf_anames[$tf_aindex];
 		deleteUI $tf_aframes[$tf_aindex];
 		text -l "" t_temp; deleteUI t_temp;
 		$tf_aindex--;
 	} 	return 1; }  
proc int bc_load() 
{
 	fileBrowserDialog -m 0 -fc "load_animlist" -an "load";
 	return 1; }  
proc int bc_save() 
{
 	fileBrowserDialog -m 1 -fc "save_animlist" -an "save";
 	return 1; 
}
proc int bc_browse() 
{
 	fileBrowserDialog -m 4 -fc "set_path" -an "browse";
 	return 1; 
}  
proc int set_path(string $filename, string $fileType) 
{
 	textField -e -tx $filename tf_path;
 	return 1; 
}  
proc int load_animlist(string $filename, string $fileType) 
{
 	global int $tf_aindex;
 	global string $tf_anames[];
  	global string $tf_aframes[];
  	while($tf_aindex>=0)
 	{
 		deleteUI $tf_anames[$tf_aindex];
 		deleteUI $tf_aframes[$tf_aindex];
 		text -l "" t_temp; deleteUI t_temp; 
		$tf_aindex--;
 	}
 	$fileid=`fopen $filename "r"`;
 	setParent RCL2;
 	while(!`feof $fileid`)
 	{
 		$tf_aindex++;
 		$fname=`fgetline $fileid`;
 		$tf_anames[$tf_aindex]=`textField -tx $fname`; 
		$fframes=`fgetline $fileid`;
 		$tf_aframes[$tf_aindex]=`textField -tx $fframes`;
 	}
 	fclose $fileid;
 	return 1; 
}  
proc int save_animlist(string $filename, string $fileType) 
{
 	global int $tf_aindex;
 	global string $tf_anames[];
  	global string $tf_aframes[];
  	$fileid=`fopen $filename "w"`;
 	for($i=0;$i<=$tf_aindex;$i++)
 	{
 		string $fname=eval("textField -q -tx "+$tf_anames[$i]);
 		string $fframes=eval("textField -q -tx "+$tf_aframes[$i]); 
		fprint $fileid ($fname+"\n"+$fframes); 
		if($i!=$tf_aindex)fprint $fileid ("\n"); 	
	}
 	fclose $fileid;
 	return 1; 
}
proc int update_progress(int $value, int $max_value, string $status)
{
 	float $divisor=(float)$max_value/(float)100;
 	float $percent=(float)$value/$divisor;
 	progressWindow -e -pr $value -st ((int)$percent+"% "+$status);
 	return 1; 
}  

proc export_bounding_sphere(string $parent,int $fileid)
{
   if(!`objExists $parent`)return;
   listRelatives -children -pa $parent;
   string $childs[]=`listRelatives -type "transform" -children   $parent`;
   float $oPos[]=`eval("getAttr "+ $parent+".translate")`;
   float $oScale[]=`eval("getAttr "+ $parent+".scale")`;

   fprint $fileid (size($childs) + "\n");
   fprint $fileid ($oPos[0] + " " + $oPos[1] + " " + $oPos[2] + " " + $oScale[0] + "\n");
   for($each in $childs)
   {
	export_bounding_sphere($each,$fileid);
   }
}
proc int bc_export() 
{
 //	flushUndo;
 //	undoInfo -state off;
  	global int $tf_aindex;
 	global string $tf_anames[];
 	global string $tf_aframes[];
  	float $scale=`floatField -q -v ff_scale`;
 	string $path=`textField -q -tx tf_path`;
 	string $filename=`substitute "(\\\\)+$" $path ""`+"\\model.txt";
 	string $anim_names[];
 	int $export_frames[];
 	int $export_frames_nameindex[];
 	int $export_frames_namecount[];
	int $export_frames_count[];
 	int $count=0;
 	int $ai=0;
 	int $efi=0;
  	//----------------------------------------fetch animations from textfields
 	while($ai<=$tf_aindex)
 	{ 
		$anim_names[$ai]=eval("textField -q -tx "+$tf_anames[$ai]);
 		if(match("[a-zA-Z0-9]+",$anim_names[$ai])=="")
//----------------------------------------------------------------warning
 		{
 				string $message="empty animation name field!";
 				progressWindow -ep; confirmDialog -t "warning" -m $message -b "ok";
				undoInfo -state on; error $message;
 		}
 		if(`size $anim_names[$ai]`>14)
//--------------------------------------------------------------------------------warning 
		{
			string $message="animation name has more than 14 characters!";
			progressWindow -ep; confirmDialog -t "warning" -m $message -b "ok";
			undoInfo -state on; error $message;
		} 		
		if(match(" +",$anim_names[$ai])!="")
//--------------------------------------------------------------------------warning
		{ 
			string $message="animation name contains spaces!";  
			progressWindow -ep; confirmDialog -t "warning" -m $message -b "ok";
			undoInfo -state on; error $message;
		}
 		string $tempstring=eval("textField -q -tx "+$tf_aframes[$ai]); 
		if(match("[0-9]+",$tempstring)=="")
//---------------------------------------------------------------------------warning 
		{ 	
			string $message="error in animation frames field!"; 
			progressWindow -ep; confirmDialog -t "warning" -m $message -b "ok";
			undoInfo -state on; error $message; 
		}
 		int $frame;
 		int $namecount=0;
 		for($frame in return_intarray($tempstring))
 		{
 			$export_frames[$efi]=$frame;
 			$export_frames_nameindex[$efi]=$ai; 
			$export_frames_namecount[$efi]=$namecount;

 			$namecount++; 
			$efi++;
 		}
		$export_frames_count[$ai]=$export_frames_namecount[$efi-1];
 		$ai++;
 	}  	//----------------------------------------evaluate selected object

 	string $object[]=`ls -tr -sl`;
 		if($object[0]=="")
//---------------------------------------------------------------------------------------------------warning
 		{
 			string $message="no object selected!";
  			progressWindow -ep; confirmDialog -t "warning" -m $message -b "ok";
			undoInfo -state on; error $message;
 		}
 	//----------------------------------------open file
 	$fileid=`fopen $filename "w"`; 
	if($fileid==0)
//-------------------------------------------------------------------------------------------------------warning 
	{
		string $message="directory does not exist!"; 
		progressWindow -ep; confirmDialog -t "warning" -m $message -b "ok";
		undoInfo -state on; error $message;
 	} 

 	string $cmd;
	int $loop;
	int $totalObjects=size($object);

	 //find locators nodes
     int $locatorCount=0;
     int $locatorArr[];

      	
     for($loop=0;$loop<size($object);$loop++)
     {
		if(match("loc_",$object[$loop])!="")
		{
			$totalObjects--;
			print ($object[$loop] + "\n");
			$locatorArr[$locatorCount]=$loop;
			$locatorCount++;
		}
		if(match("collSphereRoot",$object[$loop])!="")
			$totalObjects--;
     }
	print $locatorCount;
		

	fprint $fileid ($totalObjects + "\n");

	if(`objExists("collSphereRoot")`)
	{
	  fprint $fileid ("1" + "\n");
	  export_bounding_sphere("collSphereRoot",$fileid);	

	}else
	{	  
		fprint $fileid ("0" + "\n");
		warning "to export collision sphere you must create one sphere and call it \"collSphereRoot\"";
	}

//-------------------------------writing frames names and count
	fprint $fileid (($tf_aindex+1) +"\n");
	$current_frame=0;
	while($current_frame<($tf_aindex+1))
	{

		fprint $fileid (($export_frames_count[$current_frame]+1)+"\n");
		string $tempstring=$anim_names[$current_frame];//+$export_frames_namecount[$current_frame]; 
		fprint $fileid ($tempstring+"\n"); 
		$loop=0;
		while($loop<$export_frames_count[$current_frame]+1)
		{
			fprint $fileid ($export_frames[$loop]+"\n"); 
			$loop++;
		} 

		$current_frame++;
	}


	//write locators
	fprint $fileid ($locatorCount + "\n");
  	 int $numframes=size($export_frames);
     for($loop=0;$loop<$locatorCount;$loop++)
     {
		fprint $fileid ( $object[$locatorArr[$loop]]+"\n");
		 int $current_frame=0;
		 while ($current_frame<$numframes){
			 currentTime $export_frames[$current_frame];


			float $oPos[]=`eval("pointPosition "+ $object[$locatorArr[$loop]])`;
			fprint $fileid ($oPos[0]+" "+$oPos[1]+" "+$oPos[2]+ "\n");

			float $oRot[]=`eval("getAttr "+ $object[$locatorArr[$loop]]+".rotate")`;
			fprint $fileid ($oRot[0]+" "+$oRot[1]+" "+$oRot[2]+ "\n");
			print ($oRot[0]+" "+$oRot[1]+" "+$oRot[2]+ "\n");

			float $oScale[]=`eval("getAttr "+ $object[$locatorArr[$loop]]+".scale")`;
			fprint $fileid ($oScale[0]+" "+$oScale[1]+" "+$oScale[2]+ "\n");
 			$current_frame++;
		 }
	 }
	

//write objects
	int $coll=0;
	int $loc=0;
     for($loop=0;$loop<size($object);$loop++)
     {
  		print ($object[$loop] +"\n");

		if(match("collSphereRoot",$object[$loop])!=""){
			continue;
		}

		if($loop==$locatorArr[$loc] && $loc<$locatorCount){
			$loc++; 
			print "2";
			continue;
		}	